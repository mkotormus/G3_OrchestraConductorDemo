/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <xil_types.h>
#include "platform.h"
#include <xparameters.h>
#include <xintc.h>


void print(char *str);

#define INTC_DEVICE_ID		XPAR_MICROBLAZE_0_AXI_INTC_DEVICE_ID

//Converts x, y (0-640 in w by 0-480 in h) to index in memort for the TFT-buffer
//Which has 1024 as line width but reads only 640 pixel from start of each line
//and takes-up 512 such lines (i.e. loose 384 pixels from each line)
#define XY_TO_I(X, Y) ((Y*1024) + X)

#define WHITE  0x00FFFFFF
#define YELLOW 0x00FFFF00
#define BLUE   0x0000000FF
#define GREEN  0x0000FF00
#define RED    0x00FF0000
#define BLACK  0x00000000
#define LT_GRAY   0x00AAAAAA
#define DK_GRAY   0x00555555

#define VGA_BUFFER1 XPAR_MIG_7SERIES_0_BASEADDR


unsigned int *g_mt_base = (unsigned int *)XPAR_OV7670_MARKER_TRACKER_IP_0_S00_AXI_BASEADDR;
unsigned int *g_vga_base = (unsigned int *)XPAR_TFT_0_BASEADDR;
unsigned int *g_mig_base = (unsigned int *)XPAR_MIG_7SERIES_0_BASEADDR;


static XIntc g_intc;	/* Instance of the Interrupt Controller */
static unsigned int *g_vga_dispay_buffer;
static unsigned int * g_vga_draw_buffer;

//Must be even
#define GESTURE_BUFFER_SIZE 502
static int g_gesture_buffer_count = 0;

/*
 * Stores points of gesture as sequentials pairs of x,y values
 *      index 0  1  2  3  4  5   ...
 * i.e. value x1,y1,x2,y2,x3,y3, ...
 */
static int g_gesture_buffer[GESTURE_BUFFER_SIZE];

void vga_draw_pixel(int x, int y, int clr)
{
	unsigned int *a = (unsigned int *)g_vga_draw_buffer;
	a[XY_TO_I(x,y)] = clr;
	//if(x == 639 && y == 479)
	//	xil_printf("clearing %d %d %x\n", x, y, &a[XY_TO_I(x,y)]);
}

void vga_clear_screen(int clr)
{
	u32 j = 0;
	u32 i = 0;
	for(i = 0; i < 640; i++)
	for (j = 0; j < 512; j++)
	{
		vga_draw_pixel(i, j, clr);		//Write Y
	}
}

void vga_start()
{
	//Clear buffer before displaying
	g_vga_draw_buffer = (unsigned int *)VGA_BUFFER1;
	vga_clear_screen(DK_GRAY);
	*(g_vga_base) = VGA_BUFFER1;
	*(g_vga_base + 1) = 1;
}

void vga_stop()
{
	*(g_vga_base + 1) = 0;
}

/*
 * Swap's back buffer and currently displaying buffer
 */
/*void vga_swap()
{
	vga_dispay_buffer = buffer;
	*(vga_base + 1) = 0;
	*vga_base = buffer;
	*(vga_base + 1) = 1;
	//Ugly timer: Need to wait 16.8 ms or 420,000 on 25 Mhz clock
	//before updating next frame per TFT IP core documentation
	u64 i = 5000000;
	while (i>0) i--;
}*/

void mt_config(int r, int g, int b)
{
	*g_mt_base = 63452;
}

void mt_start()
{
	*(g_mt_base + 1) =  *(g_mt_base + 1)|1;
}

void mt_stop()
{
	*(g_mt_base + 1) = *(g_mt_base + 1) & 6;
}

void mt_enable_interrupts()
{
	*(g_mt_base + 1) = *(g_mt_base + 1) | 4;
}

void mt_disable_interrupts()
{
	*(g_mt_base + 1) = *(g_mt_base + 1) & 3;
}

/**
 * Get's marker's x and y.
 * Can be used with interrupts or in polling mode
 * as marker position always stays valid, unless disabled
 * or reset.
 *
 * valid range for x: 0 to 320
 * valid range for y: 0 to 240
 * anything else is considered as no data
 * 	x = 0x1FFFF and y = 0x1FFFF
 */
void mt_get_marker(u32 *x, u32 *y)
{
	unsigned int *base = (unsigned int *)XPAR_OV7670_MARKER_TRACKER_IP_0_S00_AXI_BASEADDR;
	u32 i_x = *(base + 2);
	u32 i_y = *(base + 3);

	//BUG: for some reason all high when cannot find value, as opposed to all 0
	if(i_x <= 320 && i_y <= 240)
	{
		*x = i_x;
		*y = i_y;
	}else{
		*x = 0x1FFFF;
		*y = 0x1FFFF;
	}
}

/*
 * This is marker tracker ISR. It will be triggered on scan completion
 * of every frame from a camera, and can be used to retrieve
 * current known location of a marker (from the past frame).
 *
 * The interrupt triggers only when a valid marke rposition was detected at
 * last scanned frame. If no marker was found, no interrupts arrive.
 *
 * All it does is fille gesture buffer with x,y points and stops until
 * the buffer is clear.
 */
void MarkerTrackerISR(void *InstancePtr)
{
    u32 x, y;
	mt_get_marker(&x, &y);
	xil_printf("ISR %d, %d\n", x, y);

	if(g_gesture_buffer_count < GESTURE_BUFFER_SIZE)
	{
		g_gesture_buffer_count+=2;
		g_gesture_buffer[g_gesture_buffer_count] = x;
		g_gesture_buffer[g_gesture_buffer_count+1] = y;
		vga_draw_pixel(320-x,y, WHITE);
	}

	XIntc_Acknowledge(&g_intc, XPAR_MICROBLAZE_0_AXI_INTC_OV7670_MARKER_TRACKER_IP_0_INTR_INTR);
}


/*****************************************************************************/
/*
*
* This function setups the interrupt system so interrupts can occur for the
* DMA.  This function assumes INTC component exists in the hardware system.
*
* @param	AxiDmaPtr is a pointer to the instance of the DMA engine
* @param	ReadIntrId is the read channel Interrupt ID.
* @param	WriteIntrId is the write channel Interrupt ID.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
static int SetupIntrSystem()
{
	int Status;

	XIntc *IntcInstancePtr =&g_intc;


	/* Initialize the interrupt controller and connect the ISRs */
	Status = XIntc_Initialize(IntcInstancePtr, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) {

		xil_printf( "Failed init intc\r\n");
		return XST_FAILURE;
	}

	Status = XIntc_Connect(IntcInstancePtr, XPAR_MICROBLAZE_0_AXI_INTC_OV7670_MARKER_TRACKER_IP_0_INTR_INTR,
	         (XInterruptHandler)MarkerTrackerISR, NULL);
	if (Status != XST_SUCCESS) {

		xil_printf(
		    "Failed write channel connect intc %d\r\n", Status);
		return XST_FAILURE;
	}

	/* Start the interrupt controller */
	Status = XIntc_Start(IntcInstancePtr, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {

		xil_printf( "Failed to start intc\r\n");
		return XST_FAILURE;
	}

	/* Enable interrupts from the hardware */
	//XIntc_Enable(IntcInstancePtr, ReadIntrId);
	XIntc_Enable(IntcInstancePtr, XPAR_MICROBLAZE_0_AXI_INTC_OV7670_MARKER_TRACKER_IP_0_INTR_INTR);

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)XIntc_InterruptHandler,
			(void *)IntcInstancePtr);

	Xil_ExceptionEnable();

	return XST_SUCCESS;
}


int main()
{
    init_platform();

    //Configure VGA with default buffer and start
    vga_start();

    //Initialize and start marker tracker
    mt_config(0,0,0);
    mt_enable_interrupts();
    mt_start();

    //Finally configure and enable interrupts
    SetupIntrSystem();

    print("Hello World\n\r");
    u64 counter = 0;
    //Do whatever... can also call mt_get_marker() at any point if need to...
    //(it keeps last valid value, although it may be old)
    while(1)
    {
    	counter ++;
    	if(g_gesture_buffer_count+2>=GESTURE_BUFFER_SIZE || counter > 10000000 + 10000000/2)
    	{
    		//Buffer filled-up, have another gesture?
    		xil_printf("Gesture captured %d\n",g_gesture_buffer_count);
    		vga_clear_screen(DK_GRAY);
    		//At last reset buffer to 0 so that it can get filled-up again...
    		g_gesture_buffer_count = 0;
    		counter = 0;
    	}
    	//mt_get_marker(&x, &y);
		//xil_printf("%d, %d\n", x, y);
    }
    return 0;
}
